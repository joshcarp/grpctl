// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

//nolint
package grpctl

import (
	"fmt"
	"os"
	"strings"

	"github.com/brehv/r"
	"github.com/joshcarp/grpctl/internal/descriptors"
	"github.com/spf13/cobra"
)

func GetUserCommand(config Config) *cobra.Command {
	var err error
	rootCmd := &cobra.Command{
		Use:   strings.ToLower("User"),
		Short: "configure User",
		Run:   nil,
	}
	something := DefaultUser()
	cobra.CheckErr(err)
	m, err := descriptors.NewInterfaceDataValue(something)
	cobra.CheckErr(err)
	get := &cobra.Command{
		Use:   "get",
		Short: "get a User",
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			user, err := config.GetUser(args[0])
			cobra.CheckErr(err)
			fmt.Println(user)
		},
	}
	add := &cobra.Command{
		Use:   "add",
		Short: "add a User",
		Run: func(cmd *cobra.Command, args []string) {
			var ok bool
			for key, val := range m {
				if key == "Headers" {
					continue
				}
				somthingval := r.R(&something, key, val.Value)
				something, ok = somthingval.(User)
				if !ok {
					cobra.CompError("Error updating User: this shouldn't happen")
					os.Exit(1)
				}
			}
			config, err = config.AddUser(something)
			cobra.CheckErr(err)
			fmt.Println(config)
			cobra.CheckErr(config.Save())
		},
	}
	del := &cobra.Command{
		Use:   "delete",
		Short: "delete a User",
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			config, err = config.DeleteUser(args[0])
			cobra.CheckErr(err)
			cobra.CheckErr(config.Save())
		},
	}
	update := &cobra.Command{
		Use:   "update",
		Short: "update a User",
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			v, ok := m["Name"]
			if !ok {
				cobra.CompError("Name not found in User: this shouldn't happen")
				os.Exit(1)
			}
			something, err := config.GetUser(v.String())
			cobra.CheckErr(err)
			for key, val := range m {
				somthingval := r.R(&something, key, val.Value)
				something, ok = somthingval.(User)
				if !ok {
					cobra.CompError("Error updating User: this shouldn't happen")
					os.Exit(1)
				}
			}
			config, err = config.UpdateUser(something)
			cobra.CheckErr(err)
			cobra.CheckErr(config.Save())
		},
	}
	list := &cobra.Command{
		Use:   "list",
		Short: "list Users",
		Run: func(cmd *cobra.Command, args []string) {
			for _, val := range config.ListUser() {
				fmt.Println(val.Name)
			}
		},
	}
	for key, val := range m {
		update.Flags().Var(val, key, "")
		update.RegisterFlagCompletionFunc(key, func(*cobra.Command, []string, string) ([]string, cobra.ShellCompDirective) {
			return []string{fmt.Sprintf("%v", m[key])}, cobra.ShellCompDirectiveDefault
		})
		add.Flags().Var(val, key, "")
		add.RegisterFlagCompletionFunc(key, func(*cobra.Command, []string, string) ([]string, cobra.ShellCompDirective) {
			return []string{fmt.Sprintf("%v", m[key])}, cobra.ShellCompDirectiveDefault
		})
	}
	rootCmd.AddCommand(get)
	rootCmd.AddCommand(add)
	rootCmd.AddCommand(update)
	rootCmd.AddCommand(del)
	rootCmd.AddCommand(list)
	return rootCmd
}

func (c Config) GetUser(name string) (User, error) {
	for _, e := range c.Users {
		if e.Name == name {
			return e, nil
		}
	}
	return User{}, NotFoundError
}

func (c Config) AddUser(s User) (Config, error) {
	for _, e := range c.Users {
		if e.Name == s.Name {
			return Config{}, NotFoundError
		}
	}
	c.Users = append(c.Users, s)
	return c, nil
}

func (c Config) DeleteUser(name string) (Config, error) {
	for i, e := range c.Users {
		if e.Name == name {
			c.Users = append(c.Users[:i], c.Users[i+1:]...)
			return c, nil
		}
	}
	return c, NotFoundError
}

func (c Config) UpdateUser(s User) (Config, error) {
	for i, e := range c.Users {
		if e.Name == s.Name {
			c.Users[i] = s
			return c, NotFoundError
		}
	}
	return c, NotFoundError
}

func (c Config) ListUser() []User {
	return c.Users
}
