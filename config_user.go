// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

//nolint
package grpctl

import (
	"encoding/json"
	"fmt"

	"github.com/joshcarp/grpctl/internal/descriptors"
	"github.com/spf13/cobra"
)

func GetUserCommands(config Config) []*cobra.Command {
	return []*cobra.Command{
		GetUserGetCommand(config),
		GetUserAddCommand(config),
		GetUserDeleteCommand(config),
		GetUserClearCommand(config),
		GetUserUpdateCommand(config),
		GetUserListCommand(config),
	}
}

func GetUserGetCommand(config Config) *cobra.Command {
	get := &cobra.Command{
		Use:               "get",
		Short:             "get a User",
		ValidArgsFunction: cobra.NoFileCompletions,
		Args:              cobra.MinimumNArgs(1),
		ValidArgs:         config.Users.Names(),
		Run: func(cmd *cobra.Command, args []string) {
			user, err := config.GetUser(args[0])
			cobra.CheckErr(err)
			fmt.Println(user)
		},
	}
	return get
}

func GetUserAddCommand(config Config) *cobra.Command {
	something := DefaultUser()
	err, defaultVals, flagstorer := SetupToDataMap(&something)
	cobra.CheckErr(err)
	add := &cobra.Command{
		Use:               "add",
		Short:             "add a User",
		ValidArgsFunction: cobra.NoFileCompletions,
		Run: func(cmd *cobra.Command, args []string) {
			toJson, err := flagstorer.ToJson()
			cobra.CheckErr(err)
			cobra.CheckErr(json.Unmarshal(toJson, &something))
			config, err = config.AddUser(something)
			cobra.CheckErr(err)
			fmt.Println(config)
			cobra.CheckErr(config.Save())
		},
	}
	flagCompletion(defaultVals, flagstorer, add)
	return add
}

func GetUserDeleteCommand(config Config) *cobra.Command {
	return &cobra.Command{
		Use:               "delete",
		Short:             "delete a User",
		Args:              cobra.ExactArgs(1),
		ValidArgsFunction: cobra.NoFileCompletions,
		ValidArgs:         config.Users.Names(),
		Run: func(cmd *cobra.Command, args []string) {
			config, err := config.DeleteUser(args[0])
			cobra.CheckErr(err)
			cobra.CheckErr(config.Save())
		},
	}
}

func GetUserClearCommand(config Config) *cobra.Command {
	return &cobra.Command{
		Use:               "clear",
		Short:             "clear all Users",
		Args:              cobra.ExactArgs(0),
		ValidArgsFunction: cobra.NoFileCompletions,
		ValidArgs:         config.Users.Names(),
		Run: func(cmd *cobra.Command, args []string) {
			config.Users = nil
			cobra.CheckErr(config.Save())
		},
	}
}

func GetUserUpdateCommand(config Config) *cobra.Command {
	something := DefaultUser()
	err, defaultVals, flagstorer := SetupToDataMap(&something)
	update := &cobra.Command{
		Use:               "update",
		Short:             "update a User",
		Args:              cobra.ExactArgs(0),
		ValidArgsFunction: cobra.NoFileCompletions,
		Run: func(cmd *cobra.Command, args []string) {
			src := flagstorer.ToInterfaceMap()
			cobra.CheckErr(err)
			v, ok := flagstorer["name"]
			if !ok {
				cobra.CheckErr(InvalidArg)
			}
			context, err := config.GetUser(v.String())
			dst, err := descriptors.ToInterfaceMap(context)
			cobra.CheckErr(err)
			allmap := descriptors.MergeInterfaceMaps(dst, src)
			cobra.CheckErr(descriptors.MapInterfaceToObject(&context, allmap))
			newcfg, err := config.UpdateUser(context)
			cobra.CheckErr(err)
			cobra.CheckErr(newcfg.Save())
		},
	}
	flagCompletion(defaultVals, flagstorer, update)
	return update
}

func GetUserListCommand(config Config) *cobra.Command {
	return &cobra.Command{
		Use:               "list",
		Short:             "list all Users",
		ValidArgsFunction: cobra.NoFileCompletions,
		Args:              cobra.ExactArgs(0),
		Run: func(cmd *cobra.Command, args []string) {
			for _, val := range config.ListUser() {
				fmt.Println(val)
			}
		},
	}
}

func (c Config) GetUser(name string) (User, error) {
	for _, e := range c.Users {
		if e.Name == name {
			return e, nil
		}
	}
	return User{}, NotFoundError
}

func (c Config) AddUser(s User) (Config, error) {
	for _, e := range c.Users {
		if e.Name == s.Name {
			return Config{}, AlreadyExists
		}
	}
	c.Users = append(c.Users, s)
	return c, nil
}

func (c Config) DeleteUser(name string) (Config, error) {
	for i, e := range c.Users {
		if e.Name == name {
			c.Users = append(c.Users[:i], c.Users[i+1:]...)
			return c, nil
		}
	}
	return c, NotFoundError
}

func (c Config) UpdateUser(s User) (Config, error) {
	for i, e := range c.Users {
		if e.Name == s.Name {
			c.Users[i] = s
			return c, nil
		}
	}
	return c, NotFoundError
}

func (c Config) ListUser() []User {
	return c.Users
}

type Users []User

func (s Users) Names() []string {
	var names []string
	for _, user := range s {
		names = append(names, user.Name)
	}
	return names
}
