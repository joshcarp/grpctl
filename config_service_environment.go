// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

//nolint
package grpctl

import (
	"fmt"
	"os"
	"strings"

	"github.com/brehv/r"
	"github.com/joshcarp/grpctl/internal/descriptors"
	"github.com/spf13/cobra"
)

func GetEnvironmentCommand(config Service) *cobra.Command {
	var err error
	rootCmd := &cobra.Command{
		Use:   strings.ToLower("Environment"),
		Short: "configure Environment",
		Run:   nil,
	}
	something := DefaultEnvironment()
	cobra.CheckErr(err)
	m, err := descriptors.NewInterfaceDataValue(something)
	cobra.CheckErr(err)
	get := &cobra.Command{
		Use:   "get",
		Short: "get a Environment",
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			user, err := config.GetEnvironment(args[0])
			cobra.CheckErr(err)
			fmt.Println(user)
		},
	}
	add := &cobra.Command{
		Use:   "add",
		Short: "add a Environment",
		Run: func(cmd *cobra.Command, args []string) {
			var ok bool
			for key, val := range m {
				somthingval := r.R(&something, key, val.Value)
				something, ok = somthingval.(Environment)
				if !ok {
					cobra.CompError("Error updating Environment: this shouldn't happen")
					os.Exit(1)
				}
			}
			config, err = config.AddEnvironment(something)
			cobra.CheckErr(err)
			fmt.Println(config)
			cobra.CheckErr(config.Save())
		},
	}
	del := &cobra.Command{
		Use:   "delete",
		Short: "delete a Environment",
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			config, err = config.DeleteEnvironment(args[0])
			cobra.CheckErr(err)
			cobra.CheckErr(config.Save())
		},
	}
	update := &cobra.Command{
		Use:   "update",
		Short: "update a Environment",
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			v, ok := m["Name"]
			if !ok {
				cobra.CompError("Name not found in Environment: this shouldn't happen")
				os.Exit(1)
			}
			something, err := config.GetEnvironment(v.String())
			cobra.CheckErr(err)
			for key, val := range m {
				somthingval := r.R(&something, key, val.Value)
				something, ok = somthingval.(Environment)
				if !ok {
					cobra.CompError("Error updating Environment: this shouldn't happen")
					os.Exit(1)
				}
			}
			config, err = config.UpdateEnvironment(something)
			cobra.CheckErr(err)
			cobra.CheckErr(config.Save())
		},
	}
	list := &cobra.Command{
		Use:   "list",
		Short: "list Environments",
		Run: func(cmd *cobra.Command, args []string) {
			for _, val := range config.ListEnvironment() {
				fmt.Println(val.Name)
			}
		},
	}
	for key, val := range m {
		update.Flags().Var(val, key, "")
		update.RegisterFlagCompletionFunc(key, func(*cobra.Command, []string, string) ([]string, cobra.ShellCompDirective) {
			return []string{fmt.Sprintf("%v", m[key])}, cobra.ShellCompDirectiveDefault
		})
	}
	rootCmd.AddCommand(get)
	rootCmd.AddCommand(add)
	rootCmd.AddCommand(update)
	rootCmd.AddCommand(del)
	rootCmd.AddCommand(list)
	return rootCmd
}

func (c Service) GetEnvironment(name string) (Environment, error) {
	for _, e := range c.Environments {
		if e.Name == name {
			return e, nil
		}
	}
	return Environment{}, NotFoundError
}

func (c Service) AddEnvironment(s Environment) (Service, error) {
	for _, e := range c.Environments {
		if e.Name == s.Name {
			return Service{}, NotFoundError
		}
	}
	c.Environments = append(c.Environments, s)
	return c, nil
}

func (c Service) DeleteEnvironment(name string) (Service, error) {
	for i, e := range c.Environments {
		if e.Name == name {
			c.Environments = append(c.Environments[:i], c.Environments[i+1:]...)
			return c, nil
		}
	}
	return c, NotFoundError
}

func (c Service) UpdateEnvironment(s Environment) (Service, error) {
	for i, e := range c.Environments {
		if e.Name == s.Name {
			c.Environments[i] = s
			return c, NotFoundError
		}
	}
	return c, NotFoundError
}

func (c Service) ListEnvironment() []Environment {
	return c.Environments
}
