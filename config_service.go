// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

//nolint
package grpctl

import (
	"encoding/json"
	"fmt"

	"github.com/joshcarp/grpctl/internal/descriptors"
	"github.com/spf13/cobra"
)

func GetServiceCommands(config Config) []*cobra.Command {
	return []*cobra.Command{
		GetServiceGetCommand(config),
		GetServiceAddCommand(config),
		GetServiceDeleteCommand(config),
		GetServiceClearCommand(config),
		GetServiceUpdateCommand(config),
		GetServiceListCommand(config),
	}
}

func GetServiceGetCommand(config Config) *cobra.Command {
	get := &cobra.Command{
		Use:               "get",
		Short:             "get a Service",
		ValidArgsFunction: cobra.NoFileCompletions,
		Args:              cobra.MinimumNArgs(1),
		ValidArgs:         config.Services.Names(),
		Run: func(cmd *cobra.Command, args []string) {
			user, err := config.GetService(args[0])
			cobra.CheckErr(err)
			fmt.Println(user)
		},
	}
	return get
}

func GetServiceAddCommand(config Config) *cobra.Command {
	something := DefaultService()
	err, defaultVals, flagstorer := SetupToDataMap(&something)
	cobra.CheckErr(err)
	add := &cobra.Command{
		Use:               "add",
		Short:             "add a Service",
		ValidArgsFunction: cobra.NoFileCompletions,
		Run: func(cmd *cobra.Command, args []string) {
			toJson, err := flagstorer.ToJson()
			cobra.CheckErr(err)
			cobra.CheckErr(json.Unmarshal(toJson, &something))
			config, err = config.AddService(something)
			cobra.CheckErr(err)
			fmt.Println(config)
			cobra.CheckErr(config.Save())
		},
	}
	flagCompletion(defaultVals, flagstorer, add)
	return add
}

func GetServiceDeleteCommand(config Config) *cobra.Command {
	return &cobra.Command{
		Use:               "delete",
		Short:             "delete a Service",
		Args:              cobra.ExactArgs(1),
		ValidArgsFunction: cobra.NoFileCompletions,
		ValidArgs:         config.Services.Names(),
		Run: func(cmd *cobra.Command, args []string) {
			config, err := config.DeleteService(args[0])
			cobra.CheckErr(err)
			cobra.CheckErr(config.Save())
		},
	}
}

func GetServiceClearCommand(config Config) *cobra.Command {
	return &cobra.Command{
		Use:               "clear",
		Short:             "clear all Services",
		Args:              cobra.ExactArgs(0),
		ValidArgsFunction: cobra.NoFileCompletions,
		ValidArgs:         config.Services.Names(),
		Run: func(cmd *cobra.Command, args []string) {
			config.Services = nil
			cobra.CheckErr(config.Save())
		},
	}
}

func GetServiceUpdateCommand(config Config) *cobra.Command {
	something := DefaultService()
	err, defaultVals, flagstorer := SetupToDataMap(&something)
	update := &cobra.Command{
		Use:               "update",
		Short:             "update a Service",
		Args:              cobra.ExactArgs(0),
		ValidArgsFunction: cobra.NoFileCompletions,
		Run: func(cmd *cobra.Command, args []string) {
			src := flagstorer.ToInterfaceMap()
			cobra.CheckErr(err)
			v, ok := flagstorer["name"]
			if !ok {
				cobra.CheckErr(InvalidArg)
			}
			context, err := config.GetService(v.String())
			dst, err := descriptors.ToInterfaceMap(context)
			cobra.CheckErr(err)
			allmap := descriptors.MergeInterfaceMaps(dst, src)
			cobra.CheckErr(descriptors.MapInterfaceToObject(&context, allmap))
			newcfg, err := config.UpdateService(context)
			cobra.CheckErr(err)
			cobra.CheckErr(newcfg.Save())
		},
	}
	flagCompletion(defaultVals, flagstorer, update)
	return update
}

func GetServiceListCommand(config Config) *cobra.Command {
	return &cobra.Command{
		Use:               "list",
		Short:             "list all Services",
		ValidArgsFunction: cobra.NoFileCompletions,
		Args:              cobra.ExactArgs(0),
		Run: func(cmd *cobra.Command, args []string) {
			for _, val := range config.ListService() {
				fmt.Println(val)
			}
		},
	}
}

func (c Config) GetService(name string) (Service, error) {
	for _, e := range c.Services {
		if e.Name == name {
			return e, nil
		}
	}
	return Service{}, NotFoundError
}

func (c Config) AddService(s Service) (Config, error) {
	for _, e := range c.Services {
		if e.Name == s.Name {
			return Config{}, AlreadyExists
		}
	}
	c.Services = append(c.Services, s)
	return c, nil
}

func (c Config) DeleteService(name string) (Config, error) {
	for i, e := range c.Services {
		if e.Name == name {
			c.Services = append(c.Services[:i], c.Services[i+1:]...)
			return c, nil
		}
	}
	return c, NotFoundError
}

func (c Config) UpdateService(s Service) (Config, error) {
	for i, e := range c.Services {
		if e.Name == s.Name {
			c.Services[i] = s
			return c, nil
		}
	}
	return c, NotFoundError
}

func (c Config) ListService() []Service {
	return c.Services
}

type Services []Service

func (s Services) Names() []string {
	var names []string
	for _, user := range s {
		names = append(names, user.Name)
	}
	return names
}
